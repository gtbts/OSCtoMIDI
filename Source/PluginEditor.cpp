/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
OsctoMidiAudioProcessorEditor::OsctoMidiAudioProcessorEditor (OsctoMidiAudioProcessor& p)
: AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    
    addAndMakeVisible (portText = new TextEditor ("port"));
    portText->setMultiLine (false);
    portText->setReturnKeyStartsNewLine (false);
    portText->setReadOnly (false);
    portText->setScrollbarsShown (true);
    portText->setCaretVisible (true);
    portText->setPopupMenuEnabled (true);
    portText->setText (TRANS("9000"));
    
    addAndMakeVisible (labelCV1 = new Label (String(), TRANS("CV1")));
    labelCV1->setFont (Font ("Futura", 14.00f, Font::plain));
    labelCV1->setJustificationType (Justification::centredLeft);
    labelCV1->setEditable (false, false, false);
    labelCV1->setColour (Label::textColourId, Colour (0xff363636));
    labelCV1->setColour (TextEditor::textColourId, Colours::black);
    labelCV1->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (scaleSelect = new ComboBox ("scale"));
    scaleSelect->setEditableText (false);
    scaleSelect->setJustificationType (Justification::centred);
    scaleSelect->setTextWhenNothingSelected (TRANS("Chromatic"));
    scaleSelect->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    scaleSelect->addItem (TRANS("Chromatic"), 1);
    scaleSelect->addItem (TRANS("Major"), 2);
    scaleSelect->addItem (TRANS("M7"), 3);
    scaleSelect->addItem (TRANS("Min7"), 4);
    scaleSelect->addItem (TRANS("Dorian"), 5);
    scaleSelect->addItem (TRANS("Minor"), 6);
    scaleSelect->addItem (TRANS("5th"), 7);
    scaleSelect->addItem (TRANS("Whole"), 8);
    scaleSelect->addListener (this);
    
    addAndMakeVisible (labelScale = new Label (String(), TRANS("Scale")));
    labelScale->setFont (Font ("Futura", 14.00f, Font::plain));
    labelScale->setJustificationType (Justification::centredLeft);
    labelScale->setEditable (false, false, false);
    labelScale->setColour (Label::textColourId, Colour (0xff363636));
    labelScale->setColour (TextEditor::textColourId, Colours::black);
    labelScale->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (labelMOSC = new Label (String(), TRANS("OSC to MIDI")));
    labelMOSC->setFont (Font ("Futura", 17.10f, Font::bold));
    labelMOSC->setJustificationType (Justification::centredLeft);
    labelMOSC->setEditable (false, false, false);
    labelMOSC->setColour (Label::textColourId, Colours::white);
    labelMOSC->setColour (TextEditor::textColourId, Colours::black);
    labelMOSC->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (labelCV2 = new Label (String(), TRANS("CV2")));
    labelCV2->setFont (Font ("Futura", 14.00f, Font::plain));
    labelCV2->setJustificationType (Justification::centredLeft);
    labelCV2->setEditable (false, false, false);
    labelCV2->setColour (Label::textColourId, Colour (0xff363636));
    labelCV2->setColour (TextEditor::textColourId, Colours::black);
    labelCV2->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (cvMeter2 = new Slider ("CVMeter2"));
    cvMeter2->setRange (0, 4095, 1);
    cvMeter2->setSliderStyle (Slider::LinearBar);
    cvMeter2->setTextBoxStyle (Slider::NoTextBox, false, 30, 14);
    cvMeter2->setColour (Slider::backgroundColourId, Colour (0xf1e8e8e8));
    cvMeter2->setColour (Slider::thumbColourId, Colour (0xff00cc88));
    cvMeter2->setColour (Slider::trackColourId, Colours::white);
    cvMeter2->setColour (Slider::rotarySliderFillColourId, Colour (0xff00cc88));
    
    addAndMakeVisible (cvMeter1 = new Slider ("CVMeter1"));
    cvMeter1->setRange (0, 4095, 1);
    cvMeter1->setSliderStyle (Slider::LinearBar);
    cvMeter1->setTextBoxStyle (Slider::NoTextBox, false, 30, 14);
    cvMeter1->setColour (Slider::backgroundColourId, Colour (0xf1e8e8e8));
    cvMeter1->setColour (Slider::thumbColourId, Colour (0xff00cc88));
    cvMeter1->setColour (Slider::trackColourId, Colours::white);
    cvMeter1->setColour (Slider::rotarySliderFillColourId, Colour (0xff00cc88));
    
    addAndMakeVisible (labelCV3 = new Label (String(), TRANS("CV3\n")));
    labelCV3->setFont (Font ("Futura", 14.00f, Font::plain));
    labelCV3->setJustificationType (Justification::centredLeft);
    labelCV3->setEditable (false, false, false);
    labelCV3->setColour (Label::textColourId, Colour (0xff363636));
    labelCV3->setColour (TextEditor::textColourId, Colours::black);
    labelCV3->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (cvMeter3 = new Slider ("CVMeter3"));
    cvMeter3->setRange (0, 4095, 1);
    cvMeter3->setSliderStyle (Slider::LinearBar);
    cvMeter3->setTextBoxStyle (Slider::NoTextBox, false, 30, 14);
    cvMeter3->setColour (Slider::backgroundColourId, Colour (0xf1e8e8e8));
    cvMeter3->setColour (Slider::thumbColourId, Colour (0xff00cc88));
    cvMeter3->setColour (Slider::trackColourId, Colours::white);
    cvMeter3->setColour (Slider::rotarySliderFillColourId, Colour (0xff00cc88));
    
    addAndMakeVisible (labelCV4 = new Label (String(), TRANS("CV4")));
    labelCV4->setFont (Font ("Futura", 14.00f, Font::plain));
    labelCV4->setJustificationType (Justification::centredLeft);
    labelCV4->setEditable (false, false, false);
    labelCV4->setColour (Label::textColourId, Colour (0xff363636));
    labelCV4->setColour (TextEditor::textColourId, Colours::black);
    labelCV4->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (cvMeter4 = new Slider ("CVMeter4"));
    cvMeter4->setRange (0, 4095, 1);
    cvMeter4->setSliderStyle (Slider::LinearBar);
    cvMeter4->setTextBoxStyle (Slider::NoTextBox, false, 30, 14);
    cvMeter4->setColour (Slider::backgroundColourId, Colour (0xf1e8e8e8));
    cvMeter4->setColour (Slider::thumbColourId, Colour (0xff00cc88));
    cvMeter4->setColour (Slider::trackColourId, Colours::white);
    cvMeter4->setColour (Slider::rotarySliderFillColourId, Colour (0xff00cc88));
    
    addAndMakeVisible (labePort = new Label (String(),TRANS("Port")));
    labePort->setFont (Font ("Futura", 14.00f, Font::plain));
    labePort->setJustificationType (Justification::centredLeft);
    labePort->setEditable (false, false, false);
    labePort->setColour (Label::textColourId, Colour (0xff363636));
    labePort->setColour (TextEditor::textColourId, Colours::black);
    labePort->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    addAndMakeVisible (muteCV1 = new TextButton ("MuteCV1"));
    muteCV1->setButtonText (String());
    muteCV1->addListener (this);
    muteCV1->setColour (TextButton::buttonColourId, Colour (0xffaea8a8));
    muteCV1->setColour (TextButton::buttonOnColourId, Colour (0xfff83A3A));
    
    addAndMakeVisible (muteCV2 = new TextButton ("MuteCV2"));
    muteCV2->setButtonText (String());
    muteCV2->addListener (this);
    muteCV2->setColour (TextButton::buttonColourId, Colour (0xffaea8a8));
    muteCV2->setColour (TextButton::buttonOnColourId, Colour (0xfff83A3A));
    
    addAndMakeVisible (muteCV3 = new TextButton ("MuteCV3"));
    muteCV3->setButtonText (String());
    muteCV3->addListener (this);
    muteCV3->setColour (TextButton::buttonColourId, Colour (0xffaea8a8));
    muteCV3->setColour (TextButton::buttonOnColourId, Colour (0xfff83A3A));
    
    addAndMakeVisible (muteCV4 = new TextButton ("MuteCV4"));
    muteCV4->setButtonText (String());
    muteCV4->addListener (this);
    muteCV4->setColour (TextButton::buttonColourId, Colour (0xffaea8a8));
    muteCV4->setColour (TextButton::buttonOnColourId, Colour (0xfff83A3A));
    
    addAndMakeVisible (resolution = new ComboBox ("resolution"));
    resolution->setEditableText (false);
    resolution->setJustificationType (Justification::centred);
    resolution->setTextWhenNothingSelected (TRANS("12bit"));
    resolution->setTextWhenNoChoicesAvailable (TRANS("(no choices)"));
    resolution->addItem (TRANS("10bit"), 1);
    resolution->addItem (TRANS("12bit"), 2);
    resolution->addItem (TRANS("14bit"), 3);
    resolution->addItem (TRANS("16bit"), 4);
    resolution->addListener (this);
    
    addAndMakeVisible (labelresolution = new Label (String(), TRANS("Resolution")));
    labelresolution->setFont (Font ("Futura", 14.00f, Font::plain));
    labelresolution->setJustificationType (Justification::centredLeft);
    labelresolution->setEditable (false, false, false);
    labelresolution->setColour (Label::textColourId, Colour (0xff363636));
    labelresolution->setColour (TextEditor::textColourId, Colours::black);
    labelresolution->setColour (TextEditor::backgroundColourId, Colour (0x00000000));
    
    setSize (260, 196);
    
    muteCV1->setToggleState(false, dontSendNotification);
    muteCV2->setToggleState(false, dontSendNotification);
    muteCV3->setToggleState(false, dontSendNotification);
    muteCV4->setToggleState(false, dontSendNotification);
    
    startTimer(100); // for timerCallBack(GUI Update)
}

OsctoMidiAudioProcessorEditor::~OsctoMidiAudioProcessorEditor()
{
    portText = nullptr;
    labelCV1 = nullptr;
    scaleSelect = nullptr;
    labelScale = nullptr;
    labelMOSC = nullptr;
    labelCV2 = nullptr;
    cvMeter2 = nullptr;
    cvMeter1 = nullptr;
    labelCV3 = nullptr;
    cvMeter3 = nullptr;
    labelCV4 = nullptr;
    cvMeter4 = nullptr;
    labePort = nullptr;
    muteCV1 = nullptr;
    muteCV2 = nullptr;
    muteCV3 = nullptr;
    muteCV4 = nullptr;
    resolution = nullptr;
    labelresolution = nullptr;
}

//==============================================================================
void OsctoMidiAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colour (0xff878686));
    
    g.setColour (Colour (0xf5f2f1f1));
    g.fillRoundedRectangle (4.0f, 4.0f, 252.0f, 188.0f, 4.500f);
    
    g.setColour (Colour (0xffaea8a8));
    g.fillPath (internalPath1);
}

void OsctoMidiAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    portText->setBounds (43, 168, 82, 20);
    labelCV1->setBounds (5, 38, 40, 20);
    scaleSelect->setBounds (43, 141, 204, 19);
    labelScale->setBounds (8, 140, 41, 20);
    labelMOSC->setBounds (3, 6, 150, 24);
    labelCV2->setBounds (5, 63, 40, 20);
    cvMeter2->setBounds (56, 65, 191, 16);
    cvMeter1->setBounds (56, 40, 191, 16);
    labelCV3->setBounds (5, 88, 40, 20);
    cvMeter3->setBounds (56, 90, 191, 16);
    labelCV4->setBounds (5, 113, 40, 20);
    cvMeter4->setBounds (56, 115, 191, 16);
    labePort->setBounds (14, 168, 41, 20);
    muteCV1->setBounds (37, 42, 12, 12);
    muteCV2->setBounds (37, 67, 12, 12);
    muteCV3->setBounds (37, 92, 12, 12);
    muteCV4->setBounds (37, 115, 12, 12);
    resolution->setBounds (188, 168, 59, 19);
    labelresolution->setBounds (128, 166, 64, 23);
    internalPath1.clear();
    internalPath1.startNewSubPath (4.0f, 9.0f);
    internalPath1.cubicTo (4.0f, 6.0f, 6.0f, 4.0f, 8.0f, 4.0f);
    internalPath1.lineTo (252.0f, 4.0f);
    internalPath1.cubicTo (254.0f, 4.0f, 256.0f, 6.0f, 256.0f, 9.0f);
    internalPath1.lineTo (256.0f, 32.0f);
    internalPath1.lineTo (4.0f, 32.0f);
    internalPath1.closeSubPath();
}

void OsctoMidiAudioProcessorEditor::comboBoxChanged (ComboBox* comboBoxThatHasChanged)
{
    const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();
    
    if (comboBoxThatHasChanged == scaleSelect)
    {
        float selectedScale = scaleSelect->getSelectedId();
        params[Scale]->beginChangeGesture();
        params[Scale]->setValueNotifyingHost ((selectedScale - 1) / 7);
        params[Scale]->endChangeGesture();
        
        processor.currentScale = selectedScale;
        
    } else  if (comboBoxThatHasChanged == resolution) {
        
        float selectedBitRes = resolution->getSelectedId();
        params[BitRes]->beginChangeGesture();
        params[BitRes]->setValueNotifyingHost ((selectedBitRes - 1) / 3);
        params[BitRes]->endChangeGesture();
        
        uint16_t range;
        
        switch (static_cast<int>(selectedBitRes))
        {
            case Bit10:
                range = Bit10Reso;
                break;
            case Bit14:
                range = Bit14Reso;
                break;
            case Bit16:
                range = Bit16Reso;
                break;
                
            default:
                range = Bit12Reso;
                break;
        }
        
        cvMeter1->setRange (0, range, 1);
        cvMeter2->setRange (0, range, 1);
        cvMeter3->setRange (0, range, 1);
        cvMeter4->setRange (0, range, 1);
        
        processor.currentResolution = range;
    }
}


void OsctoMidiAudioProcessorEditor::buttonClicked (Button* buttonThatWasClicked)
{
    const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();
    
    if (buttonThatWasClicked == muteCV1)
    {
        processor.cvMute[CV1] ? processor.cvMute[CV1] = false : processor.cvMute[CV1] = true;
        
        muteCV1->setToggleState(processor.cvMute[CV1], dontSendNotification);
        
        params[CV1]->beginChangeGesture();
        params[CV1]->setValueNotifyingHost (static_cast<float>(processor.cvMute[CV1]));
        params[CV1]->endChangeGesture();
        
    } else if (buttonThatWasClicked == muteCV2) {
        
        processor.cvMute[CV2] ? processor.cvMute[CV2] = false : processor.cvMute[CV2] = true;
        
        muteCV2->setToggleState(processor.cvMute[CV2], dontSendNotification);
        
        params[CV2]->beginChangeGesture();
        params[CV2]->setValueNotifyingHost (static_cast<float>(processor.cvMute[CV2]));
        params[CV2]->endChangeGesture();
        
    } else if (buttonThatWasClicked == muteCV3) {
        
        processor.cvMute[CV3] ? processor.cvMute[CV3] = false : processor.cvMute[CV3] = true;
        
        muteCV3->setToggleState(processor.cvMute[CV3], dontSendNotification);
        
        params[CV3]->beginChangeGesture();
        params[CV3]->setValueNotifyingHost (static_cast<float>(processor.cvMute[CV3]));
        params[CV3]->endChangeGesture();
        
    } else if (buttonThatWasClicked == muteCV4) {
        
        processor.cvMute[CV4] ? processor.cvMute[CV4] = false : processor.cvMute[CV4] = true;
        
        muteCV4->setToggleState(processor.cvMute[CV4], dontSendNotification);
        
        params[CV4]->beginChangeGesture();
        params[CV4]->setValueNotifyingHost (static_cast<float>(processor.cvMute[CV4]));
        params[CV4]->endChangeGesture();
    }
    
}

void OsctoMidiAudioProcessorEditor::textEditorReturnKeyPressed (TextEditor& textEditorChanged)
{
    reconnect = true;
}

void OsctoMidiAudioProcessorEditor::timerCallback()
{
    const OwnedArray<AudioProcessorParameter>& params = getAudioProcessor()->getParameters();
    
    for (int i = 0; i < params.size(); ++i)
    {
        const AudioProcessorParameter* param = params[i];
        const float paramValue = param->getValue();
        
        switch (i)
        {
            case CV1:
                processor.cvMute[CV1] = paramValue;
                muteCV1->setToggleState(paramValue, dontSendNotification);
                break;
            case CV2:
                processor.cvMute[CV2] = paramValue;
                muteCV2->setToggleState(paramValue, dontSendNotification);
                break;
            case CV3:
                processor.cvMute[CV4] = paramValue;
                muteCV3->setToggleState(paramValue, dontSendNotification);
                break;
            case CV4:
                processor.cvMute[CV4] = paramValue;
                muteCV4->setToggleState(paramValue, dontSendNotification);
                break;
                
            case Scale:
                scaleSelect->setSelectedId(paramValue * 7 + 1);
                break;
                
            case BitRes:
                resolution->setSelectedId(paramValue * 3 + 1);
                break;
                
            default:
                break;
        }
    }
    
    // update cv meter
    if (!processor.cvMute[CV1]) { cvMeter1->setValue(processor.cvValue[CV1]); }
    if (!processor.cvMute[CV2]) { cvMeter2->setValue(processor.cvValue[CV2]); }
    if (!processor.cvMute[CV3]) { cvMeter3->setValue(processor.cvValue[CV3]); }
    if (!processor.cvMute[CV4]) { cvMeter4->setValue(processor.cvValue[CV4]); }
    
    if (reconnect)
    {
        uint16_t port = portText->getText().getIntValue();
        processor.setOSCConnection(port);
        
        reconnect = false;
    }
    
}

